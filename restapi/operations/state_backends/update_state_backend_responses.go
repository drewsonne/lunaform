// Code generated by go-swagger; DO NOT EDIT.

package state_backends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/getlunaform/lunaform/models"
)

// UpdateStateBackendOKCode is the HTTP code returned for type UpdateStateBackendOK
const UpdateStateBackendOKCode int = 200

/*UpdateStateBackendOK OK

swagger:response updateStateBackendOK
*/
type UpdateStateBackendOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResourceTfStateBackend `json:"body,omitempty"`
}

// NewUpdateStateBackendOK creates UpdateStateBackendOK with default headers values
func NewUpdateStateBackendOK() *UpdateStateBackendOK {

	return &UpdateStateBackendOK{}
}

// WithPayload adds the payload to the update state backend o k response
func (o *UpdateStateBackendOK) WithPayload(payload *models.ResourceTfStateBackend) *UpdateStateBackendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update state backend o k response
func (o *UpdateStateBackendOK) SetPayload(payload *models.ResourceTfStateBackend) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateStateBackendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateStateBackendNotFoundCode is the HTTP code returned for type UpdateStateBackendNotFound
const UpdateStateBackendNotFoundCode int = 404

/*UpdateStateBackendNotFound Bad Request

swagger:response updateStateBackendNotFound
*/
type UpdateStateBackendNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewUpdateStateBackendNotFound creates UpdateStateBackendNotFound with default headers values
func NewUpdateStateBackendNotFound() *UpdateStateBackendNotFound {

	return &UpdateStateBackendNotFound{}
}

// WithPayload adds the payload to the update state backend not found response
func (o *UpdateStateBackendNotFound) WithPayload(payload *models.ServerError) *UpdateStateBackendNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update state backend not found response
func (o *UpdateStateBackendNotFound) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateStateBackendNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateStateBackendInternalServerErrorCode is the HTTP code returned for type UpdateStateBackendInternalServerError
const UpdateStateBackendInternalServerErrorCode int = 500

/*UpdateStateBackendInternalServerError Internal Server Error

swagger:response updateStateBackendInternalServerError
*/
type UpdateStateBackendInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewUpdateStateBackendInternalServerError creates UpdateStateBackendInternalServerError with default headers values
func NewUpdateStateBackendInternalServerError() *UpdateStateBackendInternalServerError {

	return &UpdateStateBackendInternalServerError{}
}

// WithPayload adds the payload to the update state backend internal server error response
func (o *UpdateStateBackendInternalServerError) WithPayload(payload *models.ServerError) *UpdateStateBackendInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update state backend internal server error response
func (o *UpdateStateBackendInternalServerError) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateStateBackendInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
