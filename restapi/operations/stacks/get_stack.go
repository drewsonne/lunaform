// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/getlunaform/lunaform/models"
)

// GetStackHandlerFunc turns a function with the right signature into a get stack handler
type GetStackHandlerFunc func(GetStackParams, *models.ResourceAuthUser) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStackHandlerFunc) Handle(params GetStackParams, principal *models.ResourceAuthUser) middleware.Responder {
	return fn(params, principal)
}

// GetStackHandler interface for that can handle valid get stack params
type GetStackHandler interface {
	Handle(GetStackParams, *models.ResourceAuthUser) middleware.Responder
}

// NewGetStack creates a new http.Handler for the get stack operation
func NewGetStack(ctx *middleware.Context, handler GetStackHandler) *GetStack {
	return &GetStack{Context: ctx, Handler: handler}
}

/*GetStack swagger:route GET /tf/stack/{id} stacks getStack

Get a stack

*/
type GetStack struct {
	Context *middleware.Context
	Handler GetStackHandler
}

func (o *GetStack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetStackParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.ResourceAuthUser
	if uprinc != nil {
		principal = uprinc.(*models.ResourceAuthUser) // this is really a models.ResourceAuthUser, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
