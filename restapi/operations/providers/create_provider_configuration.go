// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/getlunaform/lunaform/models"
)

// CreateProviderConfigurationHandlerFunc turns a function with the right signature into a create provider configuration handler
type CreateProviderConfigurationHandlerFunc func(CreateProviderConfigurationParams, *models.ResourceAuthUser) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateProviderConfigurationHandlerFunc) Handle(params CreateProviderConfigurationParams, principal *models.ResourceAuthUser) middleware.Responder {
	return fn(params, principal)
}

// CreateProviderConfigurationHandler interface for that can handle valid create provider configuration params
type CreateProviderConfigurationHandler interface {
	Handle(CreateProviderConfigurationParams, *models.ResourceAuthUser) middleware.Responder
}

// NewCreateProviderConfiguration creates a new http.Handler for the create provider configuration operation
func NewCreateProviderConfiguration(ctx *middleware.Context, handler CreateProviderConfigurationHandler) *CreateProviderConfiguration {
	return &CreateProviderConfiguration{Context: ctx, Handler: handler}
}

/*CreateProviderConfiguration swagger:route POST /tf/provider/{provider-name}/configurations providers createProviderConfiguration

Create a Terraform Provider Configuration

*/
type CreateProviderConfiguration struct {
	Context *middleware.Context
	Handler CreateProviderConfigurationHandler
}

func (o *CreateProviderConfiguration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateProviderConfigurationParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.ResourceAuthUser
	if uprinc != nil {
		principal = uprinc.(*models.ResourceAuthUser) // this is really a models.ResourceAuthUser, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
