// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/getlunaform/lunaform/models"
)

// DeleteProviderNoContentCode is the HTTP code returned for type DeleteProviderNoContent
const DeleteProviderNoContentCode int = 204

/*DeleteProviderNoContent No Content

swagger:response deleteProviderNoContent
*/
type DeleteProviderNoContent struct {
}

// NewDeleteProviderNoContent creates DeleteProviderNoContent with default headers values
func NewDeleteProviderNoContent() *DeleteProviderNoContent {

	return &DeleteProviderNoContent{}
}

// WriteResponse to the client
func (o *DeleteProviderNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteProviderNotFoundCode is the HTTP code returned for type DeleteProviderNotFound
const DeleteProviderNotFoundCode int = 404

/*DeleteProviderNotFound Not Found

swagger:response deleteProviderNotFound
*/
type DeleteProviderNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewDeleteProviderNotFound creates DeleteProviderNotFound with default headers values
func NewDeleteProviderNotFound() *DeleteProviderNotFound {

	return &DeleteProviderNotFound{}
}

// WithPayload adds the payload to the delete provider not found response
func (o *DeleteProviderNotFound) WithPayload(payload *models.ServerError) *DeleteProviderNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete provider not found response
func (o *DeleteProviderNotFound) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProviderNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProviderMethodNotAllowedCode is the HTTP code returned for type DeleteProviderMethodNotAllowed
const DeleteProviderMethodNotAllowedCode int = 405

/*DeleteProviderMethodNotAllowed Method Not Allowed

swagger:response deleteProviderMethodNotAllowed
*/
type DeleteProviderMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewDeleteProviderMethodNotAllowed creates DeleteProviderMethodNotAllowed with default headers values
func NewDeleteProviderMethodNotAllowed() *DeleteProviderMethodNotAllowed {

	return &DeleteProviderMethodNotAllowed{}
}

// WithPayload adds the payload to the delete provider method not allowed response
func (o *DeleteProviderMethodNotAllowed) WithPayload(payload *models.ServerError) *DeleteProviderMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete provider method not allowed response
func (o *DeleteProviderMethodNotAllowed) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProviderMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProviderUnprocessableEntityCode is the HTTP code returned for type DeleteProviderUnprocessableEntity
const DeleteProviderUnprocessableEntityCode int = 422

/*DeleteProviderUnprocessableEntity Unprocessable Entity

swagger:response deleteProviderUnprocessableEntity
*/
type DeleteProviderUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewDeleteProviderUnprocessableEntity creates DeleteProviderUnprocessableEntity with default headers values
func NewDeleteProviderUnprocessableEntity() *DeleteProviderUnprocessableEntity {

	return &DeleteProviderUnprocessableEntity{}
}

// WithPayload adds the payload to the delete provider unprocessable entity response
func (o *DeleteProviderUnprocessableEntity) WithPayload(payload *models.ServerError) *DeleteProviderUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete provider unprocessable entity response
func (o *DeleteProviderUnprocessableEntity) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProviderUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProviderInternalServerErrorCode is the HTTP code returned for type DeleteProviderInternalServerError
const DeleteProviderInternalServerErrorCode int = 500

/*DeleteProviderInternalServerError Internal Server Error

swagger:response deleteProviderInternalServerError
*/
type DeleteProviderInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewDeleteProviderInternalServerError creates DeleteProviderInternalServerError with default headers values
func NewDeleteProviderInternalServerError() *DeleteProviderInternalServerError {

	return &DeleteProviderInternalServerError{}
}

// WithPayload adds the payload to the delete provider internal server error response
func (o *DeleteProviderInternalServerError) WithPayload(payload *models.ServerError) *DeleteProviderInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete provider internal server error response
func (o *DeleteProviderInternalServerError) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProviderInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
