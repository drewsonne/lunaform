// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/getlunaform/lunaform/models"
)

// DeleteProviderHandlerFunc turns a function with the right signature into a delete provider handler
type DeleteProviderHandlerFunc func(DeleteProviderParams, *models.ResourceAuthUser) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProviderHandlerFunc) Handle(params DeleteProviderParams, principal *models.ResourceAuthUser) middleware.Responder {
	return fn(params, principal)
}

// DeleteProviderHandler interface for that can handle valid delete provider params
type DeleteProviderHandler interface {
	Handle(DeleteProviderParams, *models.ResourceAuthUser) middleware.Responder
}

// NewDeleteProvider creates a new http.Handler for the delete provider operation
func NewDeleteProvider(ctx *middleware.Context, handler DeleteProviderHandler) *DeleteProvider {
	return &DeleteProvider{Context: ctx, Handler: handler}
}

/*DeleteProvider swagger:route DELETE /tf/provider/{name} providers deleteProvider

Delete a terraform provider

*/
type DeleteProvider struct {
	Context *middleware.Context
	Handler DeleteProviderHandler
}

func (o *DeleteProvider) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteProviderParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.ResourceAuthUser
	if uprinc != nil {
		principal = uprinc.(*models.ResourceAuthUser) // this is really a models.ResourceAuthUser, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
