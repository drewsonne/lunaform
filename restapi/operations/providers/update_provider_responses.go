// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/getlunaform/lunaform/models"
)

// UpdateProviderOKCode is the HTTP code returned for type UpdateProviderOK
const UpdateProviderOKCode int = 200

/*UpdateProviderOK OK

swagger:response updateProviderOK
*/
type UpdateProviderOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResourceTfProvider `json:"body,omitempty"`
}

// NewUpdateProviderOK creates UpdateProviderOK with default headers values
func NewUpdateProviderOK() *UpdateProviderOK {

	return &UpdateProviderOK{}
}

// WithPayload adds the payload to the update provider o k response
func (o *UpdateProviderOK) WithPayload(payload *models.ResourceTfProvider) *UpdateProviderOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update provider o k response
func (o *UpdateProviderOK) SetPayload(payload *models.ResourceTfProvider) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProviderOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProviderAcceptedCode is the HTTP code returned for type UpdateProviderAccepted
const UpdateProviderAcceptedCode int = 202

/*UpdateProviderAccepted Updated

swagger:response updateProviderAccepted
*/
type UpdateProviderAccepted struct {

	/*
	  In: Body
	*/
	Payload *models.ResourceTfProvider `json:"body,omitempty"`
}

// NewUpdateProviderAccepted creates UpdateProviderAccepted with default headers values
func NewUpdateProviderAccepted() *UpdateProviderAccepted {

	return &UpdateProviderAccepted{}
}

// WithPayload adds the payload to the update provider accepted response
func (o *UpdateProviderAccepted) WithPayload(payload *models.ResourceTfProvider) *UpdateProviderAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update provider accepted response
func (o *UpdateProviderAccepted) SetPayload(payload *models.ResourceTfProvider) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProviderAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProviderBadRequestCode is the HTTP code returned for type UpdateProviderBadRequest
const UpdateProviderBadRequestCode int = 400

/*UpdateProviderBadRequest Bad Request

swagger:response updateProviderBadRequest
*/
type UpdateProviderBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewUpdateProviderBadRequest creates UpdateProviderBadRequest with default headers values
func NewUpdateProviderBadRequest() *UpdateProviderBadRequest {

	return &UpdateProviderBadRequest{}
}

// WithPayload adds the payload to the update provider bad request response
func (o *UpdateProviderBadRequest) WithPayload(payload *models.ServerError) *UpdateProviderBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update provider bad request response
func (o *UpdateProviderBadRequest) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProviderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProviderNotFoundCode is the HTTP code returned for type UpdateProviderNotFound
const UpdateProviderNotFoundCode int = 404

/*UpdateProviderNotFound Not Found

swagger:response updateProviderNotFound
*/
type UpdateProviderNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewUpdateProviderNotFound creates UpdateProviderNotFound with default headers values
func NewUpdateProviderNotFound() *UpdateProviderNotFound {

	return &UpdateProviderNotFound{}
}

// WithPayload adds the payload to the update provider not found response
func (o *UpdateProviderNotFound) WithPayload(payload *models.ServerError) *UpdateProviderNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update provider not found response
func (o *UpdateProviderNotFound) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProviderNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateProviderInternalServerErrorCode is the HTTP code returned for type UpdateProviderInternalServerError
const UpdateProviderInternalServerErrorCode int = 500

/*UpdateProviderInternalServerError Internal Server Error

swagger:response updateProviderInternalServerError
*/
type UpdateProviderInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewUpdateProviderInternalServerError creates UpdateProviderInternalServerError with default headers values
func NewUpdateProviderInternalServerError() *UpdateProviderInternalServerError {

	return &UpdateProviderInternalServerError{}
}

// WithPayload adds the payload to the update provider internal server error response
func (o *UpdateProviderInternalServerError) WithPayload(payload *models.ServerError) *UpdateProviderInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update provider internal server error response
func (o *UpdateProviderInternalServerError) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateProviderInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
