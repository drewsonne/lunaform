// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/getlunaform/lunaform/models"
)

// DescribeWorkspaceOKCode is the HTTP code returned for type DescribeWorkspaceOK
const DescribeWorkspaceOKCode int = 200

/*DescribeWorkspaceOK OK

swagger:response describeWorkspaceOK
*/
type DescribeWorkspaceOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResourceTfWorkspace `json:"body,omitempty"`
}

// NewDescribeWorkspaceOK creates DescribeWorkspaceOK with default headers values
func NewDescribeWorkspaceOK() *DescribeWorkspaceOK {

	return &DescribeWorkspaceOK{}
}

// WithPayload adds the payload to the describe workspace o k response
func (o *DescribeWorkspaceOK) WithPayload(payload *models.ResourceTfWorkspace) *DescribeWorkspaceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the describe workspace o k response
func (o *DescribeWorkspaceOK) SetPayload(payload *models.ResourceTfWorkspace) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DescribeWorkspaceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DescribeWorkspaceNotFoundCode is the HTTP code returned for type DescribeWorkspaceNotFound
const DescribeWorkspaceNotFoundCode int = 404

/*DescribeWorkspaceNotFound Not Found

swagger:response describeWorkspaceNotFound
*/
type DescribeWorkspaceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewDescribeWorkspaceNotFound creates DescribeWorkspaceNotFound with default headers values
func NewDescribeWorkspaceNotFound() *DescribeWorkspaceNotFound {

	return &DescribeWorkspaceNotFound{}
}

// WithPayload adds the payload to the describe workspace not found response
func (o *DescribeWorkspaceNotFound) WithPayload(payload *models.ServerError) *DescribeWorkspaceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the describe workspace not found response
func (o *DescribeWorkspaceNotFound) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DescribeWorkspaceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DescribeWorkspaceInternalServerErrorCode is the HTTP code returned for type DescribeWorkspaceInternalServerError
const DescribeWorkspaceInternalServerErrorCode int = 500

/*DescribeWorkspaceInternalServerError Internal Server Error

swagger:response describeWorkspaceInternalServerError
*/
type DescribeWorkspaceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ServerError `json:"body,omitempty"`
}

// NewDescribeWorkspaceInternalServerError creates DescribeWorkspaceInternalServerError with default headers values
func NewDescribeWorkspaceInternalServerError() *DescribeWorkspaceInternalServerError {

	return &DescribeWorkspaceInternalServerError{}
}

// WithPayload adds the payload to the describe workspace internal server error response
func (o *DescribeWorkspaceInternalServerError) WithPayload(payload *models.ServerError) *DescribeWorkspaceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the describe workspace internal server error response
func (o *DescribeWorkspaceInternalServerError) SetPayload(payload *models.ServerError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DescribeWorkspaceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
