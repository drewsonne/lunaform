// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workspaces API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workspaces API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateWorkspace Create a Terraform workspace
*/
func (a *Client) CreateWorkspace(params *CreateWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWorkspaceOK, *CreateWorkspaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-workspace,",
		Method:             "PUT",
		PathPattern:        "/tf/workspace/{name}",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateWorkspaceOK:
		return value, nil, nil
	case *CreateWorkspaceCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DescribeWorkspace Describe a terraform workspace
*/
func (a *Client) DescribeWorkspace(params *DescribeWorkspaceParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describe-workspace",
		Method:             "GET",
		PathPattern:        "/tf/workspace/{name}",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeWorkspaceOK), nil

}

/*
ListWorkspaces List approved terraform workspaces
*/
func (a *Client) ListWorkspaces(params *ListWorkspacesParams, authInfo runtime.ClientAuthInfoWriter) (*ListWorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkspacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-workspaces",
		Method:             "GET",
		PathPattern:        "/tf/workspaces",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListWorkspacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWorkspacesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
