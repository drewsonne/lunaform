// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/getlunaform/lunaform/models"
)

// NewCreateWorkspaceParams creates a new CreateWorkspaceParams object
// with the default values initialized.
func NewCreateWorkspaceParams() *CreateWorkspaceParams {
	var ()
	return &CreateWorkspaceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateWorkspaceParamsWithTimeout creates a new CreateWorkspaceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateWorkspaceParamsWithTimeout(timeout time.Duration) *CreateWorkspaceParams {
	var ()
	return &CreateWorkspaceParams{

		timeout: timeout,
	}
}

// NewCreateWorkspaceParamsWithContext creates a new CreateWorkspaceParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateWorkspaceParamsWithContext(ctx context.Context) *CreateWorkspaceParams {
	var ()
	return &CreateWorkspaceParams{

		Context: ctx,
	}
}

// NewCreateWorkspaceParamsWithHTTPClient creates a new CreateWorkspaceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateWorkspaceParamsWithHTTPClient(client *http.Client) *CreateWorkspaceParams {
	var ()
	return &CreateWorkspaceParams{
		HTTPClient: client,
	}
}

/*CreateWorkspaceParams contains all the parameters to send to the API endpoint
for the create workspace operation typically these are written to a http.Request
*/
type CreateWorkspaceParams struct {

	/*Name
	  A terraform workspace

	*/
	Name string
	/*TerraformWorkspace
	  A terraform workspace

	*/
	TerraformWorkspace *models.ResourceTfWorkspace

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create workspace params
func (o *CreateWorkspaceParams) WithTimeout(timeout time.Duration) *CreateWorkspaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create workspace params
func (o *CreateWorkspaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create workspace params
func (o *CreateWorkspaceParams) WithContext(ctx context.Context) *CreateWorkspaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create workspace params
func (o *CreateWorkspaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create workspace params
func (o *CreateWorkspaceParams) WithHTTPClient(client *http.Client) *CreateWorkspaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create workspace params
func (o *CreateWorkspaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the create workspace params
func (o *CreateWorkspaceParams) WithName(name string) *CreateWorkspaceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create workspace params
func (o *CreateWorkspaceParams) SetName(name string) {
	o.Name = name
}

// WithTerraformWorkspace adds the terraformWorkspace to the create workspace params
func (o *CreateWorkspaceParams) WithTerraformWorkspace(terraformWorkspace *models.ResourceTfWorkspace) *CreateWorkspaceParams {
	o.SetTerraformWorkspace(terraformWorkspace)
	return o
}

// SetTerraformWorkspace adds the terraformWorkspace to the create workspace params
func (o *CreateWorkspaceParams) SetTerraformWorkspace(terraformWorkspace *models.ResourceTfWorkspace) {
	o.TerraformWorkspace = terraformWorkspace
}

// WriteToRequest writes these params to a swagger request
func (o *CreateWorkspaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.TerraformWorkspace != nil {
		if err := r.SetBodyParam(o.TerraformWorkspace); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
