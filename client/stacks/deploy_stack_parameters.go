// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/getlunaform/lunaform/models"
)

// NewDeployStackParams creates a new DeployStackParams object
// with the default values initialized.
func NewDeployStackParams() *DeployStackParams {
	var ()
	return &DeployStackParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeployStackParamsWithTimeout creates a new DeployStackParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeployStackParamsWithTimeout(timeout time.Duration) *DeployStackParams {
	var ()
	return &DeployStackParams{

		timeout: timeout,
	}
}

// NewDeployStackParamsWithContext creates a new DeployStackParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeployStackParamsWithContext(ctx context.Context) *DeployStackParams {
	var ()
	return &DeployStackParams{

		Context: ctx,
	}
}

// NewDeployStackParamsWithHTTPClient creates a new DeployStackParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeployStackParamsWithHTTPClient(client *http.Client) *DeployStackParams {
	var ()
	return &DeployStackParams{
		HTTPClient: client,
	}
}

/*DeployStackParams contains all the parameters to send to the API endpoint
for the deploy stack operation typically these are written to a http.Request
*/
type DeployStackParams struct {

	/*TerraformStack
	  A deployed terraform module

	*/
	TerraformStack *models.ResourceTfStack

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the deploy stack params
func (o *DeployStackParams) WithTimeout(timeout time.Duration) *DeployStackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the deploy stack params
func (o *DeployStackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the deploy stack params
func (o *DeployStackParams) WithContext(ctx context.Context) *DeployStackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the deploy stack params
func (o *DeployStackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the deploy stack params
func (o *DeployStackParams) WithHTTPClient(client *http.Client) *DeployStackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the deploy stack params
func (o *DeployStackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTerraformStack adds the terraformStack to the deploy stack params
func (o *DeployStackParams) WithTerraformStack(terraformStack *models.ResourceTfStack) *DeployStackParams {
	o.SetTerraformStack(terraformStack)
	return o
}

// SetTerraformStack adds the terraformStack to the deploy stack params
func (o *DeployStackParams) SetTerraformStack(terraformStack *models.ResourceTfStack) {
	o.TerraformStack = terraformStack
}

// WriteToRequest writes these params to a swagger request
func (o *DeployStackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TerraformStack != nil {
		if err := r.SetBodyParam(o.TerraformStack); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
