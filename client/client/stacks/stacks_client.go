// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeployStack Deploy a terraform stack as a module
*/
func (a *Client) DeployStack(params *DeployStackParams, authInfo runtime.ClientAuthInfoWriter) (*DeployStackAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deploy-stack",
		Method:             "POST",
		PathPattern:        "/tf/stacks",
		ProducesMediaTypes: []string{"application/vnd.terraform.server.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.terraform.server.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeployStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeployStackAccepted), nil

}

/*
GetStack Get a stack
*/
func (a *Client) GetStack(params *GetStackParams, authInfo runtime.ClientAuthInfoWriter) (*GetStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-stack",
		Method:             "GET",
		PathPattern:        "/tf/stack/{id}",
		ProducesMediaTypes: []string{"application/vnd.terraform.server.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.terraform.server.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackOK), nil

}

/*
ListStacks List deployed TF modules
*/
func (a *Client) ListStacks(params *ListStacksParams, authInfo runtime.ClientAuthInfoWriter) (*ListStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-stacks",
		Method:             "GET",
		PathPattern:        "/tf/stacks",
		ProducesMediaTypes: []string{"application/vnd.terraform.server.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.terraform.server.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStacksOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
