// Code generated by go-swagger; DO NOT EDIT.

package state_backends

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new state backends API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for state backends API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateStateBackend Define a Terraform state backend
*/
func (a *Client) CreateStateBackend(params *CreateStateBackendParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStateBackendCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStateBackendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-state-backend",
		Method:             "POST",
		PathPattern:        "/tf/state-backends",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateStateBackendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStateBackendCreated), nil

}

/*
ListStateBackends List TF State Backends
*/
func (a *Client) ListStateBackends(params *ListStateBackendsParams, authInfo runtime.ClientAuthInfoWriter) (*ListStateBackendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStateBackendsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-state-backends",
		Method:             "GET",
		PathPattern:        "/tf/state-backends",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStateBackendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStateBackendsOK), nil

}

/*
UpdateStateBackend Define a Terraform state backend
*/
func (a *Client) UpdateStateBackend(params *UpdateStateBackendParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStateBackendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStateBackendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-state-backend",
		Method:             "PUT",
		PathPattern:        "/tf/state-backend/{id}",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateStateBackendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStateBackendOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
