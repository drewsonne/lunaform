// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new providers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for providers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateProvider Upload a Terraform provider
*/
func (a *Client) CreateProvider(params *CreateProviderParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProviderCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create-provider",
		Method:             "POST",
		PathPattern:        "/tf/providers/",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProviderCreated), nil

}

/*
DeleteProvider Delete a terraform provider
*/
func (a *Client) DeleteProvider(params *DeleteProviderParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProviderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-provider",
		Method:             "DELETE",
		PathPattern:        "/tf/provider/{name}",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProviderNoContent), nil

}

/*
GetProvider Get Terraform Provider
*/
func (a *Client) GetProvider(params *GetProviderParams, authInfo runtime.ClientAuthInfoWriter) (*GetProviderAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-provider",
		Method:             "GET",
		PathPattern:        "/tf/provider/{name}",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProviderAccepted), nil

}

/*
GetProviderConfiguration Get Configuration for Provider
*/
func (a *Client) GetProviderConfiguration(params *GetProviderConfigurationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProviderConfigurationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-provider-configuration",
		Method:             "GET",
		PathPattern:        "/tf/provider/{name}/configuration/{id}",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProviderConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ListProviderConfigurations List Configurations for s Terraform Provider
*/
func (a *Client) ListProviderConfigurations(params *ListProviderConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProviderConfigurationsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-provider-configurations",
		Method:             "GET",
		PathPattern:        "/tf/provider/{name}/configurations",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProviderConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ListProviders List Terraform Providers
*/
func (a *Client) ListProviders(params *ListProvidersParams, authInfo runtime.ClientAuthInfoWriter) (*ListProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list-providers",
		Method:             "GET",
		PathPattern:        "/tf/providers/",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProvidersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProvidersOK), nil

}

/*
UpdateProvider Update a Terraform provider
*/
func (a *Client) UpdateProvider(params *UpdateProviderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProviderAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update-provider",
		Method:             "PUT",
		PathPattern:        "/tf/provider/{name}",
		ProducesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		ConsumesMediaTypes: []string{"application/vnd.lunaform.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProviderAccepted), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
