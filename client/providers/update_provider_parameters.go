// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/getlunaform/lunaform/models"
)

// NewUpdateProviderParams creates a new UpdateProviderParams object
// with the default values initialized.
func NewUpdateProviderParams() *UpdateProviderParams {
	var ()
	return &UpdateProviderParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateProviderParamsWithTimeout creates a new UpdateProviderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateProviderParamsWithTimeout(timeout time.Duration) *UpdateProviderParams {
	var ()
	return &UpdateProviderParams{

		timeout: timeout,
	}
}

// NewUpdateProviderParamsWithContext creates a new UpdateProviderParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateProviderParamsWithContext(ctx context.Context) *UpdateProviderParams {
	var ()
	return &UpdateProviderParams{

		Context: ctx,
	}
}

// NewUpdateProviderParamsWithHTTPClient creates a new UpdateProviderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateProviderParamsWithHTTPClient(client *http.Client) *UpdateProviderParams {
	var ()
	return &UpdateProviderParams{
		HTTPClient: client,
	}
}

/*UpdateProviderParams contains all the parameters to send to the API endpoint
for the update provider operation typically these are written to a http.Request
*/
type UpdateProviderParams struct {

	/*Name
	  Terraform Provider ID

	*/
	Name string
	/*TerraformProvider
	  A terraform provider

	*/
	TerraformProvider *models.ResourceTfProvider

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update provider params
func (o *UpdateProviderParams) WithTimeout(timeout time.Duration) *UpdateProviderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update provider params
func (o *UpdateProviderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update provider params
func (o *UpdateProviderParams) WithContext(ctx context.Context) *UpdateProviderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update provider params
func (o *UpdateProviderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update provider params
func (o *UpdateProviderParams) WithHTTPClient(client *http.Client) *UpdateProviderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update provider params
func (o *UpdateProviderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the update provider params
func (o *UpdateProviderParams) WithName(name string) *UpdateProviderParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the update provider params
func (o *UpdateProviderParams) SetName(name string) {
	o.Name = name
}

// WithTerraformProvider adds the terraformProvider to the update provider params
func (o *UpdateProviderParams) WithTerraformProvider(terraformProvider *models.ResourceTfProvider) *UpdateProviderParams {
	o.SetTerraformProvider(terraformProvider)
	return o
}

// SetTerraformProvider adds the terraformProvider to the update provider params
func (o *UpdateProviderParams) SetTerraformProvider(terraformProvider *models.ResourceTfProvider) {
	o.TerraformProvider = terraformProvider
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateProviderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.TerraformProvider != nil {
		if err := r.SetBodyParam(o.TerraformProvider); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
