// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseTfModule A TF module
// swagger:model response-tf-module
type ResponseTfModule struct {

	// links
	// Required: true
	Links *HalRscLinks `json:"_links"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Enum: [git registry enterprise]
	Type string `json:"type,omitempty"`

	// vcs id
	// Required: true
	VcsID *string `json:"vcs-id"`
}

// Validate validates this response tf module
func (m *ResponseTfModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseTfModule) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ResponseTfModule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var responseTfModuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["git","registry","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseTfModuleTypeTypePropEnum = append(responseTfModuleTypeTypePropEnum, v)
	}
}

const (

	// ResponseTfModuleTypeGit captures enum value "git"
	ResponseTfModuleTypeGit string = "git"

	// ResponseTfModuleTypeRegistry captures enum value "registry"
	ResponseTfModuleTypeRegistry string = "registry"

	// ResponseTfModuleTypeEnterprise captures enum value "enterprise"
	ResponseTfModuleTypeEnterprise string = "enterprise"
)

// prop value enum
func (m *ResponseTfModule) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, responseTfModuleTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResponseTfModule) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ResponseTfModule) validateVcsID(formats strfmt.Registry) error {

	if err := validate.Required("vcs-id", "body", m.VcsID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseTfModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseTfModule) UnmarshalBinary(b []byte) error {
	var res ResponseTfModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
