// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceListTfProviderConfiguration resource list tf provider configuration
// swagger:model resource-list-tf-provider-configuration
type ResourceListTfProviderConfiguration struct {

	// provider
	Provider *ResourceTfProvider `json:"provider,omitempty"`

	// provider configurations
	// Required: true
	ProviderConfigurations []*ResourceTfProviderConfiguration `json:"provider-configurations"`
}

// Validate validates this resource list tf provider configuration
func (m *ResourceListTfProviderConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceListTfProviderConfiguration) validateProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceListTfProviderConfiguration) validateProviderConfigurations(formats strfmt.Registry) error {

	if err := validate.Required("provider-configurations", "body", m.ProviderConfigurations); err != nil {
		return err
	}

	for i := 0; i < len(m.ProviderConfigurations); i++ {
		if swag.IsZero(m.ProviderConfigurations[i]) { // not required
			continue
		}

		if m.ProviderConfigurations[i] != nil {
			if err := m.ProviderConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provider-configurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceListTfProviderConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceListTfProviderConfiguration) UnmarshalBinary(b []byte) error {
	var res ResourceListTfProviderConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
