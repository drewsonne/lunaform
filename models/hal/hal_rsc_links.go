package hal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HalRscLinks Links to this resources and documentation for this resource
// swagger:model hal-rsc-links
type HalRscLinks struct {
	// curies
	Curies []*HalCurie `json:"curies,omitempty"`

	// hal rsc links
	// Required: true
	HalRscLinks map[string]*HalHref `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *HalRscLinks) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {
		// curies
		Curies []*HalCurie `json:"curies,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv HalRscLinks

	rcv.Curies = stage1.Curies

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "curies")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]*HalHref)
		for k, v := range stage2 {
			toadd := &HalHref{}
			if err := json.Unmarshal(v, toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.HalRscLinks = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m HalRscLinks) MarshalJSON() ([]byte, error) {
	var stage1 struct {
		// curies
		Curies []*HalCurie `json:"curies,omitempty"`
	}

	stage1.Curies = m.Curies

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.HalRscLinks) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.HalRscLinks)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this hal rsc links
func (m *HalRscLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCuries(formats); err != nil {
		res = append(res, err)
	}

	for k := range m.HalRscLinks {

		if err := validate.Required(k, "body", m.HalRscLinks[k]); err != nil {
			return err
		}
		if val, ok := m.HalRscLinks[k]; ok {
			if val != nil {
				if err := val.Validate(formats); err != nil {
					return err
				}
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HalRscLinks) validateCuries(formats strfmt.Registry) error {

	if swag.IsZero(m.Curies) { // not required
		return nil
	}

	for i := 0; i < len(m.Curies); i++ {
		if swag.IsZero(m.Curies[i]) { // not required
			continue
		}

		if m.Curies[i] != nil {
			if err := m.Curies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("curies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HalRscLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HalRscLinks) UnmarshalBinary(b []byte) error {
	var res HalRscLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
