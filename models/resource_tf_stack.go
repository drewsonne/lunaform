// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	hal "github.com/getlunaform/lunaform/models/hal"
)

// ResourceTfStack A TF stack
// swagger:model resource-tf-stack
type ResourceTfStack struct {

	// embedded
	Embedded *ResourceTfStackEmbedded `json:"_embedded,omitempty"`

	// links
	Links *hal.HalRscLinks `json:"_links,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// module id
	// Required: true
	ModuleID *string `json:"module-id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// status
	// Enum: [DEPLOYING SUCCESS FAIL]
	Status string `json:"status,omitempty"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`

	// workspace
	Workspace string `json:"workspace,omitempty"`
}

// Validate validates this resource tf stack
func (m *ResourceTfStack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModuleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceTfStack) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceTfStack) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceTfStack) validateModuleID(formats strfmt.Registry) error {

	if err := validate.Required("module-id", "body", m.ModuleID); err != nil {
		return err
	}

	return nil
}

func (m *ResourceTfStack) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var resourceTfStackTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEPLOYING","SUCCESS","FAIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTfStackTypeStatusPropEnum = append(resourceTfStackTypeStatusPropEnum, v)
	}
}

const (

	// ResourceTfStackStatusDEPLOYING captures enum value "DEPLOYING"
	ResourceTfStackStatusDEPLOYING string = "DEPLOYING"

	// ResourceTfStackStatusSUCCESS captures enum value "SUCCESS"
	ResourceTfStackStatusSUCCESS string = "SUCCESS"

	// ResourceTfStackStatusFAIL captures enum value "FAIL"
	ResourceTfStackStatusFAIL string = "FAIL"
)

// prop value enum
func (m *ResourceTfStack) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceTfStackTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceTfStack) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceTfStack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceTfStack) UnmarshalBinary(b []byte) error {
	var res ResourceTfStack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResourceTfStackEmbedded resource tf stack embedded
// swagger:model ResourceTfStackEmbedded
type ResourceTfStackEmbedded struct {

	// deployments
	Deployments []*ResourceTfDeployment `json:"deployments"`

	// workspace
	Workspace *ResourceTfWorkspace `json:"workspace,omitempty"`
}

// Validate validates this resource tf stack embedded
func (m *ResourceTfStackEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceTfStackEmbedded) validateDeployments(formats strfmt.Registry) error {

	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceTfStackEmbedded) validateWorkspace(formats strfmt.Registry) error {

	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceTfStackEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceTfStackEmbedded) UnmarshalBinary(b []byte) error {
	var res ResourceTfStackEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
