// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	hal "github.com/getlunaform/lunaform/models/hal"
)

// ResourceTfModule A TF module
// swagger:model resource-tf-module
type ResourceTfModule struct {

	// embedded
	Embedded *ResourceListTfStack `json:"_embedded,omitempty"`

	// links
	Links *hal.HalRscLinks `json:"_links,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// source
	// Required: true
	Source *string `json:"source"`

	// type
	// Required: true
	// Enum: [git registry enterprise]
	Type *string `json:"type"`
}

// Validate validates this resource tf module
func (m *ResourceTfModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceTfModule) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceTfModule) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceTfModule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ResourceTfModule) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

var resourceTfModuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["git","registry","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTfModuleTypeTypePropEnum = append(resourceTfModuleTypeTypePropEnum, v)
	}
}

const (

	// ResourceTfModuleTypeGit captures enum value "git"
	ResourceTfModuleTypeGit string = "git"

	// ResourceTfModuleTypeRegistry captures enum value "registry"
	ResourceTfModuleTypeRegistry string = "registry"

	// ResourceTfModuleTypeEnterprise captures enum value "enterprise"
	ResourceTfModuleTypeEnterprise string = "enterprise"
)

// prop value enum
func (m *ResourceTfModule) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceTfModuleTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceTfModule) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceTfModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceTfModule) UnmarshalBinary(b []byte) error {
	var res ResourceTfModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
